import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { createBoard, fetchBoard, resetBoard } from "../store/boardSlice";
import { RootState, AppDispatch } from "../store/store";
import styles from "./BoardList.module.css";

const BoardList = () => {
  const [boardId, setBoardId] = useState<string>("");
  const [boardName, setBoardName] = useState<string>("");
  const dispatch = useDispatch<AppDispatch>();

  const { board, loading, error } = useSelector(
    (state: RootState) => state.board
  );

  const handleFetchBoard = () => {
    if (boardId.trim()) {
      dispatch(fetchBoard(boardId.trim()));
      setBoardId(""); // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ ID –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É
    }
  };

  const handleCreateBoard = () => {
    if (boardName.trim()) {
      dispatch(createBoard(boardName.trim()));
      setBoardName(""); // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    }
  };

  const handleCopyId = () => {
    if (board?._id) {
      navigator.clipboard.writeText(board._id);
      alert("ID —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!");
    }
  };

  const handleGoBack = () => {
    setBoardId(""); // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ ID –¥–æ—à–∫–∏
    setBoardName(""); // –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –Ω–∞–∑–≤–∏ –Ω–æ–≤–æ—ó –¥–æ—à–∫–∏
    dispatch(resetBoard());
  };

  // –§—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–ª–∞–≤—ñ—à—ñ Enter
  const handleKeyDown = (
    event: React.KeyboardEvent<HTMLInputElement>,
    action: () => void
  ) => {
    if (event.key === "Enter") {
      action();
    }
  };

  return (
    <div className={styles.boardList}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–ö–µ—Ä—É–≤–∞–Ω–Ω—è –î–æ—à–∫–∞–º–∏" –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥–æ—à–∫–∞ –Ω–µ —ñ—Å–Ω—É—î */}
      {!board && <h3 className={styles.header}>–ö–µ—Ä—É–≤–∞–Ω–Ω—è –î–æ—à–∫–∞–º–∏</h3>}

      {/* –Ø–∫—â–æ –¥–æ—à–∫–∏ —â–µ –Ω–µ–º–∞—î, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–ª–µ –¥–ª—è –ø–æ—à—É–∫—É */}
      {!board && (
        <div className={styles.inputGroup}>
          <input
            type="text"
            placeholder="–í–≤–µ–¥—ñ—Ç—å ID –¥–æ—à–∫–∏"
            value={boardId}
            onChange={(e) => setBoardId(e.target.value)}
            onKeyDown={(e) => handleKeyDown(e, handleFetchBoard)} // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Enter
            className={styles.inputField}
          />
          <button
            onClick={handleFetchBoard}
            className={styles.button}
            onKeyDown={(e) => handleKeyDown(e, handleFetchBoard)} // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
          >
            üîç –ó–Ω–∞–π—Ç–∏
          </button>
        </div>
      )}

      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞–Ω */}
      {loading && <p className={styles.loadingMessage}>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>}
      {error && <p className={styles.errorMessage}>{error}</p>}

      {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ—ó –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó –¥–æ—à–∫–∏ */}
      {board && (
        <div className={styles.boardInfo}>
          <h3 className={styles.boardName}>–î–æ—à–∫–∞: {board.name}</h3>
          <p className={styles.boardId}>
            ID: <span>{board._id}</span>
            <button onClick={handleCopyId} className={styles.copyButton}>
              üìã –ö–æ–ø—ñ—é–≤–∞—Ç–∏
            </button>
          </p>
          {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ */}
          <button onClick={handleGoBack} className={styles.goBackButton}>
            ‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
          </button>
        </div>
      )}

      {/* –ü–æ–ª–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –¥–æ—à–∫–∏ (–∑–∞–≤–∂–¥–∏ –¥–æ—Å—Ç—É–ø–Ω–µ, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –¥–æ—à–∫–∏ —â–µ –Ω–µ–º–∞—î) */}
      {!board && (
        <div className={styles.inputGroup}>
          <input
            type="text"
            value={boardName}
            onChange={(e) => setBoardName(e.target.value)}
            onKeyDown={(e) => handleKeyDown(e, handleCreateBoard)} // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è Enter
            placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –¥–æ—à–∫–∏"
            className={styles.inputField}
          />
          <button
            onClick={handleCreateBoard}
            className={styles.button}
            onKeyDown={(e) => handleKeyDown(e, handleCreateBoard)} // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏
          >
            ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏
          </button>
        </div>
      )}
    </div>
  );
};

export default BoardList;
